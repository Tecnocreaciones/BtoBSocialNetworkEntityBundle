<?php

namespace BtoB\SocialNetwork\EntityBundle\Repository;

use BtoB\SocialNetwork\CoreBundle\Doctrine\ORM\EntityRepository;

/**
 * LikeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LikeRepository extends EntityRepository
{
    function findLikeByMessageAndUser(\BtoB\SocialNetwork\EntityBundle\Entity\Message $message,\BtoB\SocialNetwork\EntityBundle\Entity\User $user)
    {
        $qb = $this->getQueryBuilder();
        $qb
            ->select('l')
            ->innerJoin('l.message', 'm')
            ->innerJoin('l.byUser', 'u')
            ->andWhere('u = :user')
            ->andWhere('m = :message')
            ->setParameter('user', $user)
            ->setParameter('message', $message)
            ;
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    function findRewardsByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,array $criteria = array(),array $sorting) {
        $qb = $this->getQueryBuilder();
        $qb
                ->select("l")
                ->addSelect("m")
                ->addSelect("u")
                ->innerJoin("l.message", 'm')
                ->innerJoin('l.byUser', 'u')
                ->andWhere('m.user = :user')
                ->andWhere('u.id != :user')
                ->setParameter('user', $user)
                ->orderBy('l.id','DESC')
                ;
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);
        if(($userName = $criteria->remove('username'))){
            $qb->andWhere($qb->expr()->like("u.username","'%".$userName."%'"));
        }
        if(($dateStart = $criteria->remove('dateStart'))){
            $qb->andWhere('l.time >= :dateStart')
            ->setParameter('dateStart', $dateStart)
            ;
        }
        if(($dateEnd = $criteria->remove('dateEnd'))){
            $qb->andWhere('l.time <= :dateEnd')
            ->setParameter('dateEnd', $dateEnd)
            ;
        }
        $this->applySorting($qb,$sorting);
        return $this->getPaginator($qb);
    }
    
    protected function getAlias() {
        return 'l';
    }
}
