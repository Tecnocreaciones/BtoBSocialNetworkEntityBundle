<?php

namespace BtoB\SocialNetwork\EntityBundle\Repository;

use BtoB\SocialNetwork\CoreBundle\Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    public function getMessagesByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('m')
           ->where('m.user = :user')
           ->setParameter('user', $user)
            ;
        return $qb->getQuery()->getResult();
    }
    
    /**
     * Retorna las ultimas noticias
     * @param \BtoB\SocialNetwork\EntityBundle\Entity\User $user
     * @param type $maxResults
     * @return type
     */
    public function getNewsByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,$maxResults = 11)
    {
        $qbUser = $this->getEntityManager()->createQueryBuilder();
        $qbUser
                ->select('l.id')
                ->from('BtoB\SocialNetwork\EntityBundle\Entity\Relation', 'r')
                ->innerJoin('r.leader', 'l')
                ->andWhere('r.subscriber = :subscriber')
                ->setParameter('subscriber', $user)
                ;
        $queryLeaders = $qbUser->getQuery()->getScalarResult();
        $leaders = array();
        foreach ($queryLeaders as $leader) {
            $leaders[] = $leader['id'];
        }
        $leaders[] = $user->getId();
        
        $qb = $this->createQueryBuilder('m');
        $qb->select('m')
            ->addSelect('u')
            //->addSelect('l')
            //->addSelect('s')
                
            ->innerJoin('m.user', 'u')
            //->innerJoin('u.leaders', 'l', \Doctrine\ORM\Query\Expr\Join::WITH,'(l.leader = :user OR l.subscriber = :user)','')
            //->innerJoin('u.subscribers', 's', \Doctrine\ORM\Query\Expr\Join::WITH,'(s.leader = :user OR s.subscriber = :user)','')
           ->andWhere($qb->expr()->in('m.user', $leaders))
           ->andWhere('m.public = :public') 
                
           ->setParameter('public', true)
           //->setParameter('user', $user)
           ->orderBy('m.id','DESC')
           ->setMaxResults($maxResults)
            ;
        return $this->getPaginator($qb);
    }
    
    /**
     * Retorna el timeline
     * @param \BtoB\SocialNetwork\EntityBundle\Entity\User $user
     * @param type $maxResults
     * @return type
     */
    public function getTimelineByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,$maxResults = 11)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('m')
           ->where('m.user = :user')
           ->innerJoin('m.user', 'u')
           ->setParameter('user', $user)
           ->orderBy('m.id','DESC')
           ->setMaxResults($maxResults)
            ;
        return $this->getPaginator($qb);
    }
    
    /**
     * Retorna el timeline
     * @param \BtoB\SocialNetwork\EntityBundle\Entity\User $user
     * @param type $maxResults
     * @return type
     */
    public function getProfileByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,\BtoB\SocialNetwork\EntityBundle\Entity\User $userLogged,$onlyPublic = true,$maxResults = 11)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('m')
            ->addSelect('u')
            ->addSelect('l')
            ->addSelect('s')
                
           ->innerJoin('m.user', 'u')
                
           ->leftJoin('u.leaders', 'l', \Doctrine\ORM\Query\Expr\Join::WITH,'(l.leader = :userLogged OR l.subscriber = :userLogged)','')
           ->leftJoin('u.subscribers', 's', \Doctrine\ORM\Query\Expr\Join::WITH,'(s.leader = :userLogged OR s.subscriber = :userLogged)','')
                
           ->andWhere('m.user = :user')
           ->orderBy('m.id','DESC')
           ->setMaxResults($maxResults)
           ->setParameter('user', $user)
           ->setParameter('userLogged', $userLogged);
        
        if($onlyPublic){
            $qb
           ->andWhere('m.public = :onlyPublic')
           ->setParameter('onlyPublic', $onlyPublic)
            ;
        }
        return $this->getPaginator($qb);
    }
    
    function findRewardsByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,array $criteria = array(),array $sorting) {
        $qb = $this->getQueryBuilder();
        $qb
                ->select("m as message")
                ->addSelect("l")
                ->addSelect($qb->expr()->count('l.id').' countRewards')
                ->innerJoin("m.likes", 'l')
                ->innerJoin('l.byUser', 'u')
                ->andWhere('m.user = :user')
//                ->andWhere('u.id != :user')
                ->groupBy('m.id')
                ->setParameter('user', $user)
                ->orderBy('countRewards','DESC')
                ;
        $sorting = new \Doctrine\Common\Collections\ArrayCollection($sorting);
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);
        if(($userName = $criteria->remove('username'))){
            $qb->andWhere($qb->expr()->like("u.username","'%".$userName."%'"));
        }
        if(($dateStart = $criteria->remove('dateStart'))){
            $qb->andWhere('l.time >= :dateStart')
            ->setParameter('dateStart', $dateStart)
            ;
        }
        if(($dateEnd = $criteria->remove('dateEnd'))){
            $qb->andWhere('l.time <= :dateEnd')
            ->setParameter('dateEnd', $dateEnd)
            ;
        }
        if(($countRewards = $sorting->remove('countRewards'))){
            $qb->orderBy('countRewards',$countRewards);
        }
        $this->applySorting($qb,$sorting->toArray());
        return $this->getPaginator($qb);
    }
    
    function findRewardsDayWinnerByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,array $criteria = array(),array $sorting) {
        $qb = $this->getQueryBuilder();
        $qb
                ->select("m as message")
                ->addSelect($qb->expr()->substring('m.time',1,10).' datePost')
                ->andWhere('m.user = :user')
//                ->andWhere('u.id != :user')
//                ->groupBy('m.id')
                ->groupBy('datePost')
                ->setParameter('user', $user)
                ->orderBy('m.likesCount','DESC')
                ;
        $sorting = new \Doctrine\Common\Collections\ArrayCollection($sorting);
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);
        if(($userName = $criteria->remove('username'))){
            $qb->andWhere($qb->expr()->like("u.username","'%".$userName."%'"));
        }
        if(($dateStart = $criteria->remove('dateStart'))){
            $qb->andWhere('m.time >= :dateStart')
            ->setParameter('dateStart', $dateStart)
            ;
        }
        if(($dateEnd = $criteria->remove('dateEnd'))){
            $qb->andWhere('m.time <= :dateEnd')
            ->setParameter('dateEnd', $dateEnd)
            ;
        }
        if(($countRewards = $sorting->remove('countRewards'))){
            $qb->orderBy('countRewards',$countRewards);
        }
        $this->applySorting($qb,$sorting->toArray());
        return $this->getPaginator($qb);
    }
    
    function findMessages($param) {
        
    }
    
    function findRewards(array $criteria = array(),array $sorting = array()) {
        $qb = $this->getQueryBuilder();
        $qb
                ->select("m as message")
//                ->addSelect("l")
                ->addSelect('m.likesCount countRewards')
//                ->innerJoin("m.likes", 'l')
                ->innerJoin("m.user", 'm_u')
//                ->innerJoin('l.byUser', 'u')
//                ->andWhere('u.id != :user')
                ->addGroupBy('m.id')
                ->addGroupBy('m_u.id')
                ->addOrderBy('m_u.id','DESC')
                ->addOrderBy('countRewards','DESC')
                ->andHaving('countRewards > 0')
                ;
        
        $sorting = new \Doctrine\Common\Collections\ArrayCollection($sorting);
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);
        if(($userName = $criteria->remove('username'))){
            $qb->andWhere($qb->expr()->like("m_u.username","'%".$userName."%'"));
        }
        if(($dateStart = $criteria->remove('dateStart'))){
            $qb->andWhere('m.time >= :dateStart')
            ->setParameter('dateStart', $dateStart)
            ;
        }
        if(($dateEnd = $criteria->remove('dateEnd'))){
            $qb->andWhere('m.time <= :dateEnd')
            ->setParameter('dateEnd', $dateEnd)
            ;
        }
        
        $qb->setMaxResults(200);
        $results = $qb->getQuery()->getResult();
        $messagesId = array();
        foreach ($results as $result) {
            $message = $result['message'];
            $message->getUser()->getId();
            $userId = $message->getUser()->getId();
            if(isset($messagesId[$userId])){
                continue;
            }
            $messagesId[$userId] = $message->getId();
        }
        if(count($messagesId) > 0){
            $qb->andWhere($qb->expr()->in('m.id', $messagesId));
        }
        $qb->orderBy('countRewards','DESC');
        
        if(($countRewards = $sorting->remove('countRewards'))){
            $qb->orderBy('countRewards',$countRewards);
        }
        $this->applySorting($qb,$sorting->toArray());
        return $this->getPaginator($qb);
    }
    
    function findMaxRewardByUser(\BtoB\SocialNetwork\EntityBundle\Entity\User $user,array $criteria = array(),array $sorting) {
        $qb = $this->getQueryBuilder();
        $qb
                ->select("m as message")
                ->addSelect("l")
                ->addSelect($qb->expr()->count('l.id').' countRewards')
                ->innerJoin("m.likes", 'l')
                ->innerJoin('l.byUser', 'u')
                ->andWhere('m.user = :user')
                ->groupBy('m.id')
                ->setParameter('user', $user)
                ->orderBy('countRewards','DESC')
                ->addOrderBy('m.time','DESC')
                ->setMaxResults(1)
                ;
        $sorting = new \Doctrine\Common\Collections\ArrayCollection($sorting);
        $criteria = new \Doctrine\Common\Collections\ArrayCollection($criteria);
        if(($userName = $criteria->remove('username'))){
            $qb->andWhere($qb->expr()->like("u.username","'%".$userName."%'"));
        }
        if(($dateStart = $criteria->remove('dateStart'))){
            $qb->andWhere('l.time >= :dateStart')
            ->setParameter('dateStart', $dateStart)
            ;
        }
        if(($dateEnd = $criteria->remove('dateEnd'))){
            $qb->andWhere('l.time <= :dateEnd')
            ->setParameter('dateEnd', $dateEnd)
            ;
        }
        if(($countRewards = $sorting->remove('countRewards'))){
            $qb->orderBy('countRewards',$countRewards);
        }
        $this->applySorting($qb,$sorting->toArray());
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    protected function getAlias() {
        return 'm';
    }
    
}
